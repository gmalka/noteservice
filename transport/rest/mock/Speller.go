// Code generated by MockGen. DO NOT EDIT.
// Source: noteservice/transport/rest (interfaces: Speller)

// Package mymock is a generated GoMock package.
package mymock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSpeller is a mock of Speller interface
type MockSpeller struct {
	ctrl     *gomock.Controller
	recorder *MockSpellerMockRecorder
}

// MockSpellerMockRecorder is the mock recorder for MockSpeller
type MockSpellerMockRecorder struct {
	mock *MockSpeller
}

// NewMockSpeller creates a new mock instance
func NewMockSpeller(ctrl *gomock.Controller) *MockSpeller {
	mock := &MockSpeller{ctrl: ctrl}
	mock.recorder = &MockSpellerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSpeller) EXPECT() *MockSpellerMockRecorder {
	return m.recorder
}

// CheckText mocks base method
func (m *MockSpeller) CheckText(arg0 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckText", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckText indicates an expected call of CheckText
func (mr *MockSpellerMockRecorder) CheckText(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckText", reflect.TypeOf((*MockSpeller)(nil).CheckText), arg0)
}
